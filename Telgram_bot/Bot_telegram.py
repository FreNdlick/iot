import os
import logging
import asyncio
import threading
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters
from dotenv import load_dotenv
from pymongo import MongoClient
from datetime import datetime, timedelta
from datetime import datetime
import matplotlib.pyplot as plt
import io


from Anomalies_Detected.anomaly_detector import process_sensor_data, toggle_analysis

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
MONGO_URL = os.getenv("MONGO_URL")
MONGO_DB = os.getenv("MONGO_DB")
MONGO_COLLECTION = os.getenv("MONGO_COLLECTION")
ANOMALY_COLLECTION = os.getenv("ANOMALY_COLLECTION")

client = MongoClient(MONGO_URL)
db = client[MONGO_DB]
sensors_collection = db[MONGO_COLLECTION]
anomalies_collection = db[ANOMALY_COLLECTION]

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

analysis_enabled = True

SENSOR_IDS = ["000DE0163B57", "000DE0163B59", "000DE0163B58", "000DE0163B56"]

# /start
async def start(update: Update, context: CallbackContext) -> None:
    commands = (
        "<b>ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/test_alert - —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç prometheus\n"
        "/count_anomalies - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π\n"
        "/list_anomalies - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏\n"
        "/toggle_analysis - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n"
        "/info - –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è\n"
        "/info_previous  –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—Ö —á–∞—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "\n"
        "<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö. "
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    )
    await update.message.reply_text(commands, parse_mode="HTML")

# /count_anomalies
async def count_anomalies(update: Update, context: CallbackContext) -> None:
    count = anomalies_collection.count_documents({})
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∞–Ω–æ–º–∞–ª–∏–π: {count}")

# /list_anomalies
async def info_previous(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
    keyboard = [[sensor_id] for sensor_id in SENSOR_IDS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 24 —á–∞—Å–æ–≤:", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –¥–ª—è /info_previous
async def handle_sensor_selection_previous(update: Update, context: CallbackContext) -> None:
    sensor_id = update.message.text
    if sensor_id not in SENSOR_IDS:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—á–∏–∫–∞.")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞—Ç—á–∏–∫–∞
    latest_data = sensors_collection.find_one(
        {"MacAddress": sensor_id},
        sort=[("MsgTimeStamp", -1)]
    )

    if not latest_data:
        await update.message.reply_text(f"‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_id}.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
    latest_timestamp = datetime.strptime(latest_data["MsgTimeStamp"], "%Y-%m-%d %H:%M:%S")
    time_24_hours_before_latest = latest_timestamp - timedelta(hours=24)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å—å—é
    sensor_data = list(sensors_collection.find(
        {
            "MacAddress": sensor_id,
            "MsgTimeStamp": {
                "$gte": time_24_hours_before_latest.strftime("%Y-%m-%d %H:%M:%S"),
                "$lt": latest_data["MsgTimeStamp"]
            }
        }
    ).sort("MsgTimeStamp", 1))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏

    if not sensor_data:
        await update.message.reply_text(f"‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_id} –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 24 —á–∞—Å–∞.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    timestamps = [datetime.strptime(data["MsgTimeStamp"], "%Y-%m-%d %H:%M:%S") for data in sensor_data]
    temperature = [float(data["TemperatureC"]) for data in sensor_data]
    humidity = [float(data["Humidity"]) for data in sensor_data]
    dewpoint = [float(data["DewPointC"]) for data in sensor_data]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    start_time = timestamps[0].strftime("%Y-%m-%d %H:%M:%S")
    end_time = timestamps[-1].strftime("%Y-%m-%d %H:%M:%S")

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    plt.figure(figsize=(10, 8))

    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    plt.subplot(3, 1, 1)
    plt.plot(timestamps, temperature, label="Temperature (¬∞C)", color="red")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
    plt.legend()

    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    plt.subplot(3, 1, 2)
    plt.plot(timestamps, humidity, label="Humidity (%)", color="blue")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –í–ª–∞–∂–Ω–æ—Å—Ç—å")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)")
    plt.legend()

    # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–∫–∏ —Ä–æ—Å—ã
    plt.subplot(3, 1, 3)
    plt.plot(timestamps, dewpoint, label="Dew Point (¬∞C)", color="green")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –¢–æ—á–∫–∞ —Ä–æ—Å—ã")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¢–æ—á–∫–∞ —Ä–æ—Å—ã (¬∞C)")
    plt.legend()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await update.message.reply_photo(photo=buf, caption=f"–ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    await update.message.reply_text(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_time} ‚Äî {end_time}")
async def list_anomalies(update: Update, context: CallbackContext) -> None:
    count = anomalies_collection.count_documents({})  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª–∏–π
    if count == 0:
        await update.message.reply_text("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    anomalies = anomalies_collection.find({}).sort("MsgTimeStamp", -1).limit(10)

    message = "üìå *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏:*\n"
    for anomaly in anomalies:
        message += (f"üìç –î–∞—Ç—á–∏–∫: `{anomaly['sensor_id']}`\n"
                    f"‚è∞ –í—Ä–µ–º—è: `{anomaly['MsgTimeStamp']}`\n"
                    f"‚ö† –î–∞–Ω–Ω—ã–µ: `{anomaly['data']}`\n"
                    f"----------------------\n")

    await update.message.reply_text(message, parse_mode="Markdown")

# /toggle_analysis
async def toggle_analysis_command(update: Update, context: CallbackContext) -> None:
    global analysis_enabled
    analysis_enabled = not analysis_enabled
    status = "–≤–∫–ª—é—á–µ–Ω" if analysis_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö {status}.")

# /info
async def info(update: Update, context: CallbackContext) -> None:
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
    keyboard = [[sensor_id] for sensor_id in SENSOR_IDS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—á–∏–∫:", reply_markup=reply_markup)


#/ test_alert
async def test_alert(update: Update, context: CallbackContext) -> None:
    from metricsPromet import test_alert
    test_alert= 1;
    commands = (
        "–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
        "–ß–µ—Ä–µ–∑ prometheus_alertmanager"
    )

    await update.message.reply_text(commands, parse_mode="HTML")

async def handle_sensor_selection(update: Update, context: CallbackContext) -> None:
    sensor_id = update.message.text
    if sensor_id not in SENSOR_IDS:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—á–∏–∫–∞.")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    time_24_hours_ago = datetime.now() - timedelta(hours=24)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    sensor_data = list(sensors_collection.find(
        {"MacAddress": sensor_id, "MsgTimeStamp": {"$gte": time_24_hours_ago.strftime("%Y-%m-%d %H:%M:%S")}}
    ).sort("MsgTimeStamp", 1))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏

    if not sensor_data:
        await update.message.reply_text("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    timestamps = [datetime.strptime(data["MsgTimeStamp"], "%Y-%m-%d %H:%M:%S") for data in sensor_data]
    temperature = [float(data["TemperatureC"]) for data in sensor_data]
    humidity = [float(data["Humidity"]) for data in sensor_data]
    dewpoint = [float(data["DewPointC"]) for data in sensor_data]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    start_time = timestamps[0].strftime("%Y-%m-%d %H:%M:%S")
    end_time = timestamps[-1].strftime("%Y-%m-%d %H:%M:%S")

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    plt.figure(figsize=(10, 8))

    # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    plt.subplot(3, 1, 1)
    plt.plot(timestamps, temperature, label="Temperature (¬∞C)", color="red")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)")
    plt.legend()

    # –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    plt.subplot(3, 1, 2)
    plt.plot(timestamps, humidity, label="Humidity (%)", color="blue")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –í–ª–∞–∂–Ω–æ—Å—Ç—å")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)")
    plt.legend()

    # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–∫–∏ —Ä–æ—Å—ã
    plt.subplot(3, 1, 3)
    plt.plot(timestamps, dewpoint, label="Dew Point (¬∞C)", color="green")
    plt.title(f"–î–∞—Ç—á–∏–∫ {sensor_id} - –¢–æ—á–∫–∞ —Ä–æ—Å—ã")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–¢–æ—á–∫–∞ —Ä–æ—Å—ã (¬∞C)")
    plt.legend()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    await update.message.reply_photo(photo=buf, caption=f"–ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    await update.message.reply_text(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_time} ‚Äî {end_time}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è PM25 –∏ AlarmStatus
    last_data = sensor_data[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
    message = (
        f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_id}:\n"
        f"üå´Ô∏è PM2.5: {last_data['PM25']}\n"
        f"üö® –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏: {last_data['AlarmStatus']}"
    )
    await update.message.reply_text(message)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_for_anomalies():
    while True:
        print("–ù–∞—á–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π")
        if analysis_enabled:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ sensors
            latest_data = list(sensors_collection.find().sort("MsgTimeStamp", -1).limit(1))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not latest_data:
                print("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                await asyncio.sleep(10)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                continue

            data = latest_data[0]  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            required_keys = ["MacAddress", "TemperatureC", "PM25", "AlarmStatus"]
            if not all(key in data for key in required_keys):
                print("‚ö† –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                await asyncio.sleep(10)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            sensor_id = data["MacAddress"]
            value = float(data["TemperatureC"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            pm25 = data["PM25"]
            alarm_status = data["AlarmStatus"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            is_anomaly = process_sensor_data(sensor_id, value, pm25, alarm_status)
            if is_anomaly:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                message = (f"‚ö† *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!*\n"
                           f"üìç –î–∞—Ç—á–∏–∫: `{sensor_id}`\n"
                           f"‚è∞ –í—Ä–µ–º—è: `{data['MsgTimeStamp']}`\n"
                           f"üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{value}¬∞C`\n"
                           f"üå´Ô∏è PM2.5: `{pm25}`\n"
                           f"üö® –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥–∏: `{alarm_status}`")
                await application.bot.send_message(chat_id=update.message.chat_id, text=message, parse_mode="Markdown")

        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main_bot():
    global application
    asyncio.set_event_loop(asyncio.new_event_loop())  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop

    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_alert", test_alert))
    application.add_handler(CommandHandler("info_previous", info_previous))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sensor_selection_previous))
    application.add_handler(CommandHandler("count_anomalies", count_anomalies))
    application.add_handler(CommandHandler("list_anomalies", list_anomalies))
    application.add_handler(CommandHandler("toggle_analysis", toggle_analysis_command))
    application.add_handler(CommandHandler("info", info))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sensor_selection))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π
    asyncio.get_event_loop().create_task(check_for_anomalies())

    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    bot_thread = threading.Thread(target=main_bot, daemon=True, name="start_bot")
    bot_thread.start()